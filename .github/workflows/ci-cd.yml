name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: customer-registration-api
  EC2_HOST: ec2-13-60-91-204.eu-north-1.compute.amazonaws.com
  EC2_USER: ubuntu

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    services:
      postgres:
        image: postgres:17.4
        env:
          POSTGRES_USER: CustomerRegistrationSystem
          POSTGRES_DB: CustomerRegistrationSystem
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd "pg_isready -U CustomerRegistrationSystem -d CustomerRegistrationSystem"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run unit tests
      run: mvn clean test

    - name: Run integration tests
      run: mvn verify -DskipITs
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/CustomerRegistrationSystem
        SPRING_DATASOURCE_USERNAME: CustomerRegistrationSystem

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: target/*.jar

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production

    steps:
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: application-jar
        path: ./

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # Install Java if not present
          if ! command -v java &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y openjdk-17-jre
          fi

          # Create app directory
          sudo mkdir -p /opt/customer-registration-api
          sudo chown $USER:$USER /opt/customer-registration-api

          # Stop existing application
          sudo pkill -f customer-registration || true

    - name: Copy JAR to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        source: "*.jar"
        target: "/opt/customer-registration-api/"

    - name: Start application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd /opt/customer-registration-api
          
          # Create application.properties if needed
          cat > application.properties << EOF
          server.port=8080
          spring.profiles.active=prod
          logging.level.root=INFO
          EOF

          # Start application in background
          nohup java -jar *.jar --spring.config.location=application.properties > app.log 2>&1 &

          # Wait a bit for startup
          sleep 10

          # Check if application is running
          if pgrep -f "customer-registration" > /dev/null; then
            echo "Application started successfully"
          else
            echo "Failed to start application"
            exit 1
          fi

    - name: Health Check
      run: |
        sleep 60
        for i in {1..5}; do
          if curl -f http://${{ env.EC2_HOST }}:8080/management/health; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Health check attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        echo "Health check failed after 5 attempts"
        exit 1


  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
    - name: Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ Deployment successful!"
        echo "Application is now running at: http://${{ env.EC2_HOST }}:8080"
        echo "Health check: http://${{ env.EC2_HOST }}:8080/management/health"

    - name: Deployment Failed
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        exit 1