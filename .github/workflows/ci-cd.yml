name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  AWS_REGION: eu-north-1
  DOCKER_REPO: customer-registration-api
  EC2_HOST: ec2-13-60-91-204.eu-north-1.compute.amazonaws.com
  EC2_USER: ubuntu
  APP_DIR: /opt/customer-registration-api

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    services:
      postgres:
        image: postgres:17.4
        env:
          POSTGRES_USER: CustomerRegistrationSystem
          POSTGRES_DB: CustomerRegistrationSystem
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd "pg_isready -U CustomerRegistrationSystem -d CustomerRegistrationSystem"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run unit tests
        run: mvn clean test

      - name: Run integration tests
        run: mvn verify -DskipITs
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/CustomerRegistrationSystem
          SPRING_DATASOURCE_USERNAME: CustomerRegistrationSystem

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build application JAR
        run: mvn clean package -DskipTests -DskipProperties=true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_REPO }}:latest .

      - name: Push image to GHCR
        run: docker push ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_REPO }}:latest

# Commented out deployment to EC2
#  deploy:
#    name: Deploy to EC2
#    runs-on: ubuntu-latest
#    needs: build
#    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
#    environment: production
#    steps:
#      - name: Prepare EC2 environment
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ env.EC2_HOST }}
#          username: ${{ env.EC2_USER }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          timeout: 600s
#          command_timeout: 30m
#          script: |
#            echo "Preparing deployment environment..."
#            ...
#
#      - name: Start application
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ env.EC2_HOST }}
#          username: ${{ env.EC2_USER }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          script: |
#            ...
#
#      - name: Health Check
#        run: |
#          ...

# Commented out notification job
#  notify:
#    name: Notify Deployment
#    runs-on: ubuntu-latest
#    needs: [test, build, deploy]
#    if: always()
#    steps:
#      - name: Deployment Success
#        if: needs.deploy.result == 'success'
#        run: |
#          ...
#      - name: Deployment Failed
#        if: needs.deploy.result == 'failure'
#        run: |
#          ...
