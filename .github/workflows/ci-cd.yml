name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: customer-registration-api
  EC2_HOST: ec2-13-60-91-204.eu-north-1.compute.amazonaws.com
  EC2_USER: ubuntu

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    services:
      postgres:
        image: postgres:17.4
        env:
          POSTGRES_USER: CustomerRegistrationSystem
          POSTGRES_DB: CustomerRegistrationSystem
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd "pg_isready -U CustomerRegistrationSystem -d CustomerRegistrationSystem"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run unit tests
      run: mvn clean test

    - name: Run integration tests
      run: mvn verify -DskipITs
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/CustomerRegistrationSystem
        SPRING_DATASOURCE_USERNAME: CustomerRegistrationSystem

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'
    
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
      image-digest: ${{ steps.build-image.outputs.image-digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build-image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Output image details
      run: |
        echo "image-tag=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT
        echo "image-digest=${{ steps.build-image.outputs.digest }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        envs: ECR_REGISTRY,IMAGE_TAG,AWS_REGION
        script: |
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          fi

          # Install AWS CLI if not present
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            rm -rf awscliv2.zip aws
          fi

          # Configure AWS CLI with instance profile or provided credentials
          aws configure set region ${{ env.AWS_REGION }}

          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

          # Stop and remove existing container
          docker stop customer-registration-api || true
          docker rm customer-registration-api || true

          # Pull latest image
          docker pull $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

          # Run new container
          docker run -d \
            --name customer-registration-api \
            --restart unless-stopped \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e SPRING_DATASOURCE_URL=${{ secrets.DATABASE_URL }} \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

          # Clean up old images
          docker image prune -af

    - name: Health Check
      run: |
        sleep 60
        for i in {1..5}; do
          if curl -f http://${{ env.EC2_HOST }}:8080/management/health; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Health check attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        echo "Health check failed after 5 attempts"
        exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
    - name: Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ Deployment successful!"
        echo "Application is now running at: http://${{ env.EC2_HOST }}:8080"
        echo "Health check: http://${{ env.EC2_HOST }}:8080/management/health"

    - name: Deployment Failed
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        exit 1